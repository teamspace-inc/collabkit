{
  "rules": {
    "website": {
      ".read": false,
      ".write": false,
      "signups": {
        "$entry": {
          ".write": "!data.exists()",
          "email": {
            ".validate": "newData.isString()"
          },
          "createdAt": {
            ".validate": "newData.isNumber()"
          }
        }
      }
    },
    "workspaces": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          ".write": "(root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId))",
          "name": {
            ".validate": "newData.isString()",
            ".write": "root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)"
          },
          "profiles": {
            "$endUserId": {
              ".read": "auth.token.appId === $appId",
              ".validate": "newData.isBoolean()",
              ".write": "root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && $endUserId === auth.token.userId)"
            }
          }
        }
      }
    },
    "adminOrgs": {
      "$uid": {
        ".read": "auth.uid === $uid",
        "$orgId": {
          ".read": true,
          ".write": "root.child('apps').child($orgId).child('admins').child(auth.uid).exists()"
        }
      }
    },
    "orgs": {
      "$orgId": {
        ".read": true,
        "name": {
          ".read": true,
          ".write": "root.child('apps').child($orgId).child('admins').child(auth.uid).exists()"
        },
        "admins": {
          "$adminId": {
            ".read": "root.child('apps').child($orgId).child('admins').child(auth.uid).exists()",
            ".validate": "newData.isBoolean()",
            ".write": "root.child('apps').child($orgId).child('admins').child(auth.uid).exists()" // 'Firebase Admin' can write the first one
          }
        }
      }
    },
    "orgApps": {
      "$orgId": {
        ".read": "root.child('orgs').child($orgId).child('admins').child(auth.uid).exists()",
        "$appId": {
          ".read": true,
          ".write": false
        }
      }
    },
    "apps": {
      "$appId": {
        ".read": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
        // display name for dashboard
        "label": {
          ".read": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString()"
        },
        // what end-users see in emails
        "name": {
          ".read": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString()"
        },
        // mirror of org>admins for ease of checking
        "admins": {
          "$adminId": {
            ".read": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
            ".validate": "newData.isBoolean()",
            ".write": false
          }
        },
        // dashboard expects only one key to have value true
        "keys": {
          "$key": {
            ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
            ".validate": "newData.isString()",
            ".read": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()"
          }
        },
        "mode": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString() && (newData.val() === 'SECURED' || newData.val() === 'UNSECURED')"
        },
        "isEmailDisabled": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isBoolean()"
        },
        "defaultNotificationPreference": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString() && (newData.val() === 'allWorkspace' || newData.val() === 'threadOnly' || newData.val() === 'off')"
        },
        "emailBatchDelayMs": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isNumber()"
        },
        "logoUrl": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString()"
        },
        "webhook": {
          ".read": true,
          ".write": "root.child('apps').child($appId).child('admins').child(auth.uid).exists()",
          ".validate": "newData.isString()"
        }
      }
    },
    "profiles": {
      "$appId": {
        "$endUserId": {
          ".read": "auth.token.appId === $appId",
          ".write": "(auth.token.appId === $appId) && (root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $endUserId === auth.token.userId))",
          "name": {
            ".validate": "newData.isString()"
          },
          "email": {
            ".validate": "newData.isString()"
          },
          "avatar": {
            ".validate": "newData.isString()"
          },
          "color": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    "isTyping": {
      "$appId": {
        "$workspaceId": {
          "$threadId": {
            ".read": "auth.token.appId === $appId",
            "$endUserId": {
              ".write": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
              ".validate": "newData.isBoolean()"
            }
          }
        }
      }
    },
    "presence": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          "$endUserId": {
            ".write": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && newData.child('createdById').val() === auth.token.userId)))",
            ".validate": "newData.hasChildren(['url', 'timestamp'])"
          }
        }
      }
    },
    "pins": {
      "$appId": {
        "$workspaceId": {
          ".read": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
          "$objectId": {
            "pinId": {
              ".write": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
              ".validate": "newData.hasChildren(['x', 'y', 'threadId'])",
              "x": {
                ".validate": "newData.isNumber()"
              },
              "y": {
                ".validate": "newData.isNumber()"
              },
              "threadId": {
                ".validate": "newData.isString() && (root.child('workspaces').child($appId).child($workspaceId).child('timeline').exists())"
              }
            }
          }
        }
      }
    },
    "views": {
      "threadProfiles": {
        "$appId": {
          "$workspaceId": {
            ".read": "auth.token.appId === $appId",
            "$threadId": {
              ".read": "auth.token.appId === $appId",
              "$endUserId": {
                ".read": "auth.token.appId === $appId",
                ".write": "auth.token.appId === $appId && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && $endUserId === auth.token.userId)))",
                ".validate": "newData.isBoolean()"
              }
            }
          }
        }
      },
      "openThreads": {
        "$appId": {
          "$workspaceId": {
            ".read": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
            "$threadId": {
              ".write": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))"
            }
          }
        }
      },
      "openPins": {
        "$appId": {
          "$workspaceId": {
            ".read": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
            "$objectId": {
              "pinId": {
                ".write": "(auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
                ".validate": "newData.hasChildren(['x', 'y', 'threadId'])",
                "x": {
                  ".validate": "newData.isNumber()"
                },
                "y": {
                  ".validate": "newData.isNumber()"
                },
                "threadId": {
                  ".validate": "newData.isString() && (root.child('workspaces').child($appId).child($workspaceId).child('timeline').exists())"
                }
              }
            }
          }
        }
      },
      "seenBy": {
        "$appId": {
          "$workspaceId": {
            ".read": "auth.token.appId === $appId",
            "$threadId": {
              ".indexOn": "seenUntilId",
              "$endUserId": {
                ".read": "auth.token.appId === $appId",
                ".write": "auth.token.appId === $appId && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && $endUserId === auth.token.userId)))",
                "seenUntilId": {
                  ".validate": "root.child('timeline').child($appId).child($workspaceId).child($threadId).child(newData.val()).exists()"
                },
                "seenAt": {
                  ".validate": "newData.isNumber()"
                }
              }
            }
          }
        }
      },
      "inbox": {
        "$appId": {
          "$workspaceId": {
            ".read": "auth.token.appId === $appId",
            ".indexOn": "createdAt",
            "$threadId": {
              ".write": "newData.hasChildren(['type', 'body', 'createdById', 'createdAt', 'name']) && (auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && newData.child('createdById').val() === auth.token.userId)))",
              "name": {
                ".validate": "newData.isString()"
              },
              "type": {
                ".validate": "newData.isString() && (newData.val() === 'message' || newData.val() ==='reaction' || newData.val() === 'adminMessage' || newData.val() === 'system' || newData.val() === 'delete' || newData.val() === 'edit')"
              },
              "createdById": {
                ".validate": "newData.isString() && root.child('workspaces').child($appId).child($workspaceId).child('profiles').child(newData.val()).exists()"
              },
              "createdAt": {
                ".validate": "newData.isNumber()"
              },
              "body": {
                ".validate": "newData.isString()"
              }
            }
          }
        }
      }
    },
    "seen": {
      "$appId": {
        "$endUserId": {
          "$workspaceId": {
            ".read": "auth.token.appId === $appId",
            ".indexOn": "seenUntilId",
            "$threadId": {
              ".read": "auth.token.appId === $appId",
              ".write": "newData.hasChildren(['seenUntilId', 'seenAt']) && (auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && $endUserId === auth.token.userId)))",
              "seenUntilId": {
                ".validate": "root.child('timeline').child($appId).child($workspaceId).child($threadId).child(newData.val()).exists()"
              },
              "seenAt": {
                ".validate": "newData.isNumber()"
              }
            }
          }
        }
      }
    },
    "threadInfo": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          "$threadId": {
            ".read": "auth.token.appId === $appId",
            ".write": "newData.hasChildren(['url']) && (auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId)))",
            // used to mark users that should receive notifications by default, e.g. owner, assignee
            "defaultSubscribers": {
              "$endUserId": {
                ".validate": "newData.isBoolean()"
              }
            },
            "name": {
              ".validate": "newData.isString()"
            },
            "url": {
              ".validate": "newData.isString()"
            }
          }
        }
      }
    },
    "timeline": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          "$threadId": {
            ".read": "auth.token.appId === $appId",
            ".indexOn": "createdAt",
            "$eventId": {
              ".write": "newData.hasChildren(['type', 'body', 'createdById', 'createdAt']) && (auth.token.appId === $appId) && ((root.child('apps').child(auth.token.appId).child('mode').val() === 'UNSECURED' || (root.child('apps').child(auth.token.appId).child('mode').val() === 'SECURED' && $workspaceId === auth.token.workspaceId && newData.child('createdById').val() === auth.token.userId))) && !root.child('timeline').child($appId).child($workspaceId).child($threadId).child($eventId).exists()",
              ".read": "auth.token.appId === $appId",
              "type": {
                ".validate": "newData.isString() && (newData.val() === 'message' || newData.val() ==='reaction' || newData.val() === 'adminMessage' || newData.val() === 'system' || newData.val() === 'delete' || newData.val() === 'edit')"
              },
              "body": {
                ".validate": "newData.isString()"
              },
              "createdById": {
                ".validate": "newData.isString() && root.child('workspaces').child($appId).child($workspaceId).child('profiles').child(newData.val()).exists()"
              },
              "createdAt": {
                ".validate": "newData.isNumber()"
              },
              "parentId": {
                ".validate": "!newData.exists() || (newData.exists() && root.child('timeline').child($appId).child($workspaceId).child($threadId).child(newData.val()).exists())"
              },
              "system": {
                ".validate": "newData.val() === 'resolve' || newData.val() === 'reopen'"
              },
              "mentions": {
                "$endUserId": {
                  ".validate": "newData.isBoolean()"
                }
              }
            }
          }
        }
      }
    },
    "notifiedUntil": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          "$threadId": {
            "$endUserId": {
              ".validate": "!newData.exists() || (newData.exists() && root.child('timeline').child($appId).child($workspaceId).child($threadId).child(newData.val()).exists())",
              ".read": true,
              ".write": false // only 'Firebase Admin' can write
            }
          }
        }
      }
    },
    "notificationPreferences": {
      "$appId": {
        "$workspaceId": {
          ".read": "auth.token.appId === $appId",
          "$threadId": {
            "$endUserId": {
              // overrides the above setting
              // "notifyFor": {
              //   ".validate": "newData.isString() && (newData.val() === 'allMessages' || newData.val() === 'onlyMentions' || newData.val() === 'off')"
              // },
              // overrides the above settings
              "isMuted": {
                ".write": "auth.token.unsubAppId === $appId && auth.token.unsubWorkspaceId === $workspaceId && auth.token.unsubProfileId === $endUserId && auth.token.unsubThreadId === $threadId",
                ".validate": "newData.isBoolean()"
              }
            }
          }
        }
      }
    }
  }
}
